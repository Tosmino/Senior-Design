#include "mcc_generated_files/system.h"

// Initialize the ADC
void initADC(int amask)
{
    AD1PCFG=amask;
    
    // Assign values to the control registers
    AD1CON1 = 0x00E0;
    AD1CON2 = 0x0000;
    AD1CON3 = 0x1F01;
    
    // Input channel select is assigned 0 (unused)
    AD1CSSL = 0;
    
    // Change most significant bit of AD1CON1, to turn on
    AD1CON1bits.ADON = 1;
}

// Read the ADC
int readADC(int ch)
{
    // Assign channel number
    AD1CHS = ch;
    
    // Set sample bit
    AD1CON1bits.SAMP=1;
    
    // Wait for done flag
    while(!(AD1CON1bits.DONE));
    
    // Clear done flag
    AD1CON1bits.DONE=0;
    
    return ADC1BUF0;
}

// Initialize the LCD
void initLCD(void)
{
    T1CON = 0x8030;
    TMR1 = 0; while(TMR1 < 2000);
    // Initialize the PMP
    PMCON = 0x8303;
    PMMODE = 0x03FF;
    PMAEN = 0x0001;
    PMADDR = 0;
    PMDIN1 = 0b00111000;
    TMR1 = 0; while(TMR1 < 3);
    PMDIN1 = 0b00001100;
    TMR1 = 0; while(TMR1 < 100);
    PMDIN1 = 0b00000001;
    TMR1 = 0; while(TMR1 < 100);
    PMDIN1 = 0b00000110;
    TMR1 = 0; while(TMR1 < 100);
}

// Read from the LCD
char readLCD(int addr)
{
    int dummy;
    while(PMMODEbits.BUSY);
    PMADDR = addr;
    dummy = PMDIN1;
    while(PMMODEbits.BUSY);
    return(PMDIN1);
}

#define BusyLCD() readLCD(0)&0x80

// Write to the LCD
void writeLCD(int addr, char c)
{
    while(BusyLCD());
    while(PMMODEbits.BUSY);
    PMADDR = addr;
    PMDIN1 = c;
}

#define putLCD(d) writeLCD(1, (d))
#define cmdLCD(c) writeLCD(0, (c))
#define homeLCD() writeLCD(0, 2)

// Moves cursor to the second row
void row2LCD()
{
PMADDR = 0;
PMDIN1 = 0b00010000;
TMR1 = 0; while(TMR1 < 100);
PMDIN1 = 0b11000000;
TMR1 = 0; while(TMR1 < 100);
}

// Function used to output temperature to LCD at current row
void outputTemp(int temp, char K)
{
    int left = temp / 10; // Isolate the largest two digits
    int decimal = temp % 10; // Find the decimal number using modulus on the original
    int leftDigit = left / 10; // Find the left most digit by dividing by 10
    int rightDigit = left % 10; // Finally use modulus to find the ones place digit
        
    // Convert all the numbers to chars
    char firstDigit = leftDigit + '0';
    char secondDigit = rightDigit + '0';
    char decimalDigit = decimal + '0';
        
    // Send all of the characters to the display
    putLCD(firstDigit);
    putLCD(secondDigit);
    putLCD('.');
    putLCD(decimalDigit);
    putLCD(' ');
    putLCD(0b11011111); // Degree symbol
    putLCD(K);
    TMR1 = 0; while(TMR1 < 100);

}

int main(void)
{
    SYSTEM_Initialize();
    
    // Initialize the LCD
    initLCD();
    
    // Initialize variables
    int tempRAW, tempC, mvConst, tempF;
    int voltDiff;
    // 500 mV * 10,000
    mvConst = 500; 
    
    // voltage difference used for calculations
    voltDiff = 3300 / 1023;
    
    // Configure timer
    T1CON = 0x8030;
    
    // Initialize the Analog Digital Converter
    initADC(0xFFEF);
    
    // Initialize TRISA
    TRISA = 0xFF00;

    while (1)
    {
        // Read from sensor and store to tempRAW
        tempRAW = readADC(4);
        PORTA=tempRAW;
        
        // Wait every half second
        TMR1=0;while(TMR1<31250);
        
        // Calculate temperature in celsius
        tempC = ((voltDiff * tempRAW) - mvConst);
        
        // Calculate temperature in Fahrenheit
        tempF = 32 + ((1.8 * (voltDiff * tempRAW) - mvConst));
        
        // Display the temperature on LCD
        outputTemp(tempC, 'C');
        
        // Move to the second row
        row2LCD();
        
        // Display the temperature on LCD
        outputTemp(tempF, 'F');
        
        // Return to home position on LCD
        homeLCD();
        
        
    }

    return 1;
}
